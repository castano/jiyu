
#import "Compiler";
#import "Basic";
#import "LibC";

func compile_single_test_file(path: string, as_metaprogram: bool) {
    printf("Compiling: %.*s\n", path.length, path.data);

    var options: Build_Options;
    options.executable_name = strip_path_extension(path);

    var compiler = create_compiler_instance(*options);

    if compiler_load_file(compiler, path) != true return;
    if compiler_typecheck_program(compiler) != true return;
    if compiler_generate_llvm_module(compiler) != true return;

    if as_metaprogram {
        if compiler_run_metaprogram(compiler, 0, null) != true return;
    } else {
        if compiler_emit_object_file(compiler) != true return;
        if compiler_run_default_link_command(compiler) != true return;
    }
}

// @@ Add option to silence the error and just check for failure.
func compile_failing_test(source: string) {

    var options: Build_Options;
    var compiler = create_compiler_instance(*options);

    if compiler_load_string(compiler, source) != true return; // @@ Pass location information?
    if compiler_typecheck_program(compiler) != true return;
}


func @metaprogram main() {
    var as_metaprogram = true;

    compile_single_test_file("tests/array_index.jyu", as_metaprogram);
    compile_single_test_file("tests/conditional_compilation.jyu", as_metaprogram);
    compile_single_test_file("tests/first_class_types.jyu", as_metaprogram);
    compile_single_test_file("tests/template_argument_test.jyu", as_metaprogram);
    compile_single_test_file("tests/function_pointers.jyu", as_metaprogram);
    compile_single_test_file("tests/overload_test.jyu", as_metaprogram);
    compile_single_test_file("tests/primitive_types.jyu", as_metaprogram);
    compile_single_test_file("tests/binary_operators.jyu", as_metaprogram);
    compile_single_test_file("tests/operators.jyu", as_metaprogram);
    compile_single_test_file("tests/structs.jyu", as_metaprogram);
    compile_single_test_file("tests/enum.jyu", as_metaprogram);

    // Attempt to use an incomplete type:
    compile_failing_test("struct Foo { var foo: My_Foo; } typealias My_Foo = Foo;");
    //compile_failing_test("struct Foo { var foo: Foo; }");

    // Duplicate declaration:
    //compile_failing_test("var foo: float; var foo: float;");
    //compile_failing_test("var foo: float; func foo() {}");
    //compile_failing_test("func foo() {} var foo: float;");
    //compile_failing_test("func foo(bar: int, bar: int) {}");

}
