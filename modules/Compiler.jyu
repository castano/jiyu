
struct Compiler {
    var is_metaprogram: bool;
    var errors_reported: int64;
}

struct Build_Options {
    var executable_name: string;
    var target_triple  : string;
    var only_want_obj_file : bool = false;
    var verbose_diagnostics: bool = false;
    var emit_llvm_ir       : bool = false;
}

library "jiyu";

// set/get the default module path that all Compiler instances created after
// the set call will use.
func @c_function compiler_system_get_default_module_search_path() -> string;
func @c_function compiler_system_set_default_module_search_path(path: string) -> void;

func @c_function create_compiler_instance(options: *Build_Options) -> *Compiler;
func @c_function destroy_compiler_instance(compiler: *Compiler) -> void;

func @c_function compiler_get_build_options(compiler: *Compiler) -> *Build_Options;

func @c_function compiler_load_file(compiler: *Compiler, filename: string) -> bool;
func @c_function compiler_load_string(compiler: *Compiler, source: string) -> bool;

func @c_function compiler_typecheck_program(compiler: *Compiler) -> bool;
func @c_function compiler_generate_llvm_module(compiler: *Compiler) -> bool;
func @c_function compiler_emit_object_file(compiler: *Compiler) -> bool;
func @c_function compiler_run_default_link_command(compiler: *Compiler) -> bool;

func @c_function compiler_jit_program(compiler: *Compiler) -> bool;
func @c_function compiler_jit_lookup_symbol(compiler: *Compiler, symbol_name: string) -> *void;

func compiler_run_metaprogram(compiler: *Compiler, argc: int32, argv: **uint8) -> bool {
    if !compiler_jit_program(compiler) return false;

    var Main = cast(@c_function (argc: int32, argv: **uint8) -> int32) compiler_jit_lookup_symbol(compiler, "main");
    if (!Main) {
        #import "LibC";

        // @Incomplete report error using a compiler facility since we should not import LibC for printf..
        printf("Could not find symbol 'main' in JIT program.\n");
        return false;
    }

    Main(argc, argv);
    return true;
}

func @c_function compiler_add_library_search_path(compiler: *Compiler, path: string) -> void;
func @c_function compiler_add_module_search_path(compiler: *Compiler, path: string) -> void;
func @c_function compiler_add_compiled_object_for_linking(compiler: *Compiler, path: string) -> void;

func @c_function compiler_get_loaded_files(compiler: *Compiler) -> []string;
