
#import "LibC";
#import "Array";

typealias string_length_type = __builtin_string_length_type;

// Okay, so, there's nothing in the language right now to do something like new(My_Struct)
// SO we take an initializer parameter so we can use the already established template system.
// If this ends up sucking for everyone then we can figure something else out, but in the short
// term I think I like this model.
// -josh 27 November 2019
func New<T>(initializer: T) -> *T {
    var mem = cast(*T) malloc(sizeof(T));
    <<mem = initializer;
    return mem;
}

// @TODO this doesnt need to be a template...
func Delete<T>(mem: *T) {
    free(mem);
}

func assert(cond: bool) {
    assert(cond, "");
}

func assert(cond: bool, msg: string) {

    if cond {
        return;
    }

    if msg  printf("Assertion failed: %.*s\n", msg.length, msg.data);
    else    printf("Assertion failed!\n");

    __builtin_debugtrap();
}

func advance(s: *string, amount: string_length_type) {
    assert(amount >= 0 && amount <= s.length);

    s.data   += amount;
    s.length -= amount;
}

func basename(_s: string) -> string {
    var s = _s;
    while (s.length > 0) {
        if (s[s.length-1] == '/' || s[s.length-1] == '\\') return s;

        s.length -= 1;
    }

    return s;
}

func strip_path_extension(_s: string) -> string {
    var s = _s;

    while (s.length > 0) {
        if (s[s.length-1] == '/' || s[s.length-1] == '\\') return _s; // @TODO break

        if (s[s.length-1] == '.') {
            s.length -= 1;
            return s;
        }

        s.length -= 1;
    }

    return s;
}

func copy_string(input: string) -> string {
    var data = cast(*uint8) malloc(cast(size_t) input.length);
    memcpy(data, input.data, cast(size_t) input.length);

    var o: string;
    o.data = data;
    o.length = input.length;
    return o;
}

func to_c_string(input: string) -> c_string {
    var data: c_string = cast(c_string) malloc(cast(size_t) input.length + 1);
    memcpy(data, input.data, cast(size_t) input.length);
    data[input.length] = 0;
    return data;
}

func c_style_strlen(input: c_string) -> string_length_type {
    var cursor = input;
    while <<cursor != 0 {
        cursor += 1;
    }

    return cast(string_length_type) (cursor - input);
}

func to_string(input: c_string) -> string {
    var s: string;
    s.data   = input;
    s.length = c_style_strlen(input);
    return s;
}

func split(input: string, delim: uint8) -> [] string {
    var start = 0;
    var cursor = 0;

    var output: [..] string;

    while cursor < input.length {
        if input[cursor] == delim {
            var o: string;
            o.data = input.data + start;
            o.length = cursor - start;

            output.add(o);

            start = cursor + 1;
        }

        cursor += 1;
    }

    var o: string;
    o.data = input.data + start;
    o.length = cursor - start;
    output.add(o);

    var static: [] string;
    static.data = output.data;
    static.count = output.count;
    return static;
}

func min<T>(a: T, b: T) -> T {
    if a < b return a;
    return b;
}

func max<T>(a: T, b: T) -> T {
    if a < b return b;
    return a;
}

func append (base: string, str: string, max_size: int64) -> string {
    // copy str at the end of base.
    var dst = base.data + base.length;
    var length = min(max_size - base.length, str.length);
    memcpy(dst, str.data, cast(uint32)length); // @@ size_t == uint32?
    var c = base;
    c.length += length;
    return c;
}

func make_string (data: *uint8, length: int64) -> string {
    var c: string;
    c.data = data;
    c.length = length;
    return c;
}

func alloc_string(length: int64) -> string {
    var c: string;
    c.data = cast(*uint8)malloc(cast(uint32)length);
    c.length = length;
    return c;    
}

func join(input: [] string, delim = "", delim_after_last = false) -> string {
    if !input.count return "";
    
    var length = (input.count - 1) * delim.length;
    if delim_after_last length += delim.length;

    for input {
        length += it.length;
    }

    var result = alloc_string(length);
    var c = make_string(result.data, 0);

    for input {
        c = append(c, it, result.length);
        c = append(c, delim, result.length);
    }

    return result;
}

func get_lines(input: string) -> [] string {
    return split(input, '\n');
}

func read_entire_file(path: string) -> (success: bool, result: string) {
    var c_path = to_c_string(path);
    var file = fopen(c_path, "rb");
    free(c_path);

    if file == null return (false, "");

    fseek(file, 0, SEEK_END);
    var length = ftell(file);
    fseek(file, 0, SEEK_SET);

    if !length return (true, "");

    var mem = cast(c_string) malloc(cast(size_t) length);
    fread(mem, 1, cast(size_t) length, file);
    // @TODO verify fread success

    fclose(file);

    var result: string;
    result.data = mem;
    result.length = length;
    return (true, result);
}

func write_entire_file(path: string, contents: string) -> bool {
    var c_path = to_c_string(path);
    var file = fopen(c_path, "wb");
    free(c_path);

    if file == null return false;

    fwrite(contents.data, 1, cast(size_t) contents.length, file);
    // @TODO verify fwrite success

    fclose(file);
    return true;
}

// @Temporary maybe?
func get_slice<T>(arr: [..] T) -> [] T {
    var out: [] T;
    out.data  = arr.data;
    out.count = arr.count;
    return out;
}

func get_command_line(strings: [] string) -> *uint8 {
    var total_length: string_length_type = 0;

    for strings total_length += it.length;

    total_length += strings.count * 3 + 1; // enough space for quotes and a space around each argument

    var cursor: string_length_type = 0;
    var final = cast(*uint8) malloc(cast() total_length);

    for strings {
        final[cursor] = '\"'; // "
        cursor += 1;

        memcpy(final + cursor, it.data, cast() it.length);
        cursor += it.length;

        final[cursor] = '\"'; // "
        cursor += 1;
        final[cursor] = ' ';
        cursor += 1;
    }

    final[cursor] = 0;
    cursor += 1;
    return final;
}

#if os(Windows) {
    #import "Windows";

    func get_executable_path() -> string {
        var buf: [512] uint8;

        var module = GetModuleHandleA(null);
        GetModuleFileNameA(module, buf.data, cast(DWORD) buf.count);
        return copy_string(to_string(buf.data));
    }

    func set_working_directory(path: string) {
        var c_str = to_c_string(path);
        SetCurrentDirectoryA(c_str);
        free(c_str);
    }

    func get_working_directory() -> string {
        var buf: [512] uint8;
        GetCurrentDirectoryA(cast(DWORD) buf.count, buf.data);
        return copy_string(to_string(buf.data));
    }

    // @Return process exit code.
    func run_command(command_strings: [] string) -> int32 {
        var startup: STARTUPINFOA;
        startup.cb = sizeof(STARTUPINFOA);
        startup.dwFlags    = STARTF_USESTDHANDLES;
        startup.hStdInput  = GetStdHandle(STD_INPUT_HANDLE);
        startup.hStdOutput = GetStdHandle(STD_OUTPUT_HANDLE);
        startup.hStdError  = GetStdHandle(STD_ERROR_HANDLE);

        var process_info: PROCESS_INFORMATION;

        var cmd_line = get_command_line(command_strings);
        var success = CreateProcessA(null, cmd_line, null, null, TRUE, 0, null, null, *startup, *process_info);
        if success == 0 {
            return -1;
        }

        WaitForSingleObject(process_info.hProcess, INFINITE);
        free(cmd_line);

        var exit_code: DWORD;
        GetExitCodeProcess(process_info.hProcess, *exit_code);
        return cast(int32) exit_code;
    }

    // Slightly lazier version of the [] string one.
    // @Return process exit code.
    func run_command(command_string: string) -> int32 {
        var cmd_line = to_c_string(command_string);

        var startup: STARTUPINFOA;
        startup.cb = sizeof(STARTUPINFOA);
        startup.dwFlags    = STARTF_USESTDHANDLES;
        startup.hStdInput  = GetStdHandle(STD_INPUT_HANDLE);
        startup.hStdOutput = GetStdHandle(STD_OUTPUT_HANDLE);
        startup.hStdError  = GetStdHandle(STD_ERROR_HANDLE);

        var process_info: PROCESS_INFORMATION;
        var success = CreateProcessA(null, cmd_line, null, null, TRUE, 0, null, null, *startup, *process_info);
        if success == 0 {
            return -1;
        }

        WaitForSingleObject(process_info.hProcess, INFINITE);
        free(cmd_line);

        var exit_code: DWORD;
        GetExitCodeProcess(process_info.hProcess, *exit_code);
        return cast(int32) exit_code;
    }
}

#if os(MacOSX) {
    func get_executable_path() -> string {
        func @c_function _NSGetExecutablePath(buf: *uint8, bufsize: *uint32) -> int32;

        var buf: [512] uint8;
        var bufsize: uint32 = cast(uint32) buf.count;
        var result = _NSGetExecutablePath(buf.data, *bufsize);
        if (result != 0) return "";

        return copy_string(to_string(buf.data));
    }

    func set_working_directory(path: string) {
        func @c_function chdir(path: c_string) -> int32; // @Unix

        var c_str = to_c_string(path);
        chdir(c_str);
        free(c_str);
    }

    func get_working_directory() -> string {
        func @c_function getcwd(buf: *uint8, size: size_t) -> c_string;

        var buf: [512] uint8;
        getcwd(buf.data, cast(size_t) buf.count);
        return copy_string(to_string(buf.data));
    }
}


#if os(Linux) {
    func get_executable_path() -> string {
        func @c_function readlink(path: c_string, buf: *uint8, bufsize: size_t) -> int32;

        var buf: [512] uint8;
        var bufsize: size_t = cast(size_t) buf.count;
        var result = readlink("/proc/self/exe", buf.data, bufsize);
        if (result < 0) return "";

        return copy_string(to_string(buf.data));
    }

    func set_working_directory(path: string) {
        func @c_function chdir(path: c_string) -> int32;

        var c_str = to_c_string(path);
        chdir(c_str);
        free(c_str);
    }

    func get_working_directory() -> string {
        func @c_function getcwd(buf: *uint8, size: size_t) -> c_string;

        var buf: [512] uint8;
        getcwd(buf.data, cast(size_t) buf.count);
        return copy_string(to_string(buf.data));
    }
}

#if os(MacOSX) || os(Linux) {
    func run_command(args: [] string) -> int32 {
        var cmd_line = get_command_line(args);
        // @TODO this should use execve stuff.
        var result = system(cmd_line);
        return result;
    }
}

func wchar_to_mbstring(input: *wchar_t) -> string {
    var in_length = wcslen(input);
    var needed = wcstombs(null, input, in_length);

    var output: string;
    output.data   = cast() malloc(needed);
    output.length = cast() needed;

    wcstombs(output.data, input, in_length);
    return output;
}

// @Incomplete, we need some sort of print function here..
struct String_Builder {
    let BUCKET_ALLOC_SIZE = 4096;

    typealias Bucket = [..] uint8;

    var buckets: [..] Bucket;

    func init(builder: *String_Builder) {
        make_bucket(builder, BUCKET_ALLOC_SIZE);
    }

    func reset(builder: *String_Builder) {
        for * builder.buckets {
            if (it.data) free(it.data);
            it.data = null;
        }

        builder.buckets.reset();
    }

    func make_bucket(builder: *String_Builder, amount: array_count_type) {
        var b: Bucket;
        b.data = cast(*uint8) malloc(cast(size_t) amount);
        b.allocated = amount;
        b.count = 0;
        builder.buckets.add(b);
    }

    func putchar(builder: *String_Builder, c: uint8) {
        var bucket = *builder.buckets[builder.buckets.count-1];

        if (bucket.count < bucket.allocated) {
            bucket.data[bucket.count] = c;
            bucket.count += 1;
        } else {
            make_bucket(builder, BUCKET_ALLOC_SIZE);
            putchar(builder, c);
        }
    }

    func append(builder: *String_Builder, s: string) {
        for 0..s.length-1 {
            putchar(builder, s[it]);
        }
    }

    func append(builder: *String_Builder, s: c_string) {
        var o = to_string(s);
        append(builder, o);
    }



    func to_string(builder: *String_Builder) -> string {
        var total_data: array_count_type = 0;
        for builder.buckets {
            total_data += it.count;
        }

        var data = cast(*uint8) malloc(cast(size_t) total_data);
        var cursor: array_count_type = 0;
        for builder.buckets {
            memcpy(data+cursor, it.data, cast(size_t) it.count);
            cursor += it.count;
        }

        assert(cursor == total_data);

        var s: string;
        s.data = data;
        s.length = total_data;
        return s;
    }
}
